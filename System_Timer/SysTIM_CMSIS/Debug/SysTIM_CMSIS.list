
SysTIM_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  08000414  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  08000414  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000414  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000414  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000858  00000000  00000000  0001043d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000215  00000000  00000000  00010c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fefb  00000000  00000000  00010f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000065c  00000000  00000000  00020e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054468  00000000  00000000  000214df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00075947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000120  00000000  00000000  00075998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003f4 	.word	0x080003f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003f4 	.word	0x080003f4

08000170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f003 0307 	and.w	r3, r3, #7
 800017e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000182:	68db      	ldr	r3, [r3, #12]
 8000184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000186:	68ba      	ldr	r2, [r7, #8]
 8000188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800018c:	4013      	ands	r3, r2
 800018e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800019c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <__NVIC_SetPriorityGrouping+0x44>)
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	60d3      	str	r3, [r2, #12]
}
 80001a8:	bf00      	nop
 80001aa:	3714      	adds	r7, #20
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	e000ed00 	.word	0xe000ed00

080001b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	6039      	str	r1, [r7, #0]
 80001c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	db0a      	blt.n	80001e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	490c      	ldr	r1, [pc, #48]	; (8000204 <__NVIC_SetPriority+0x4c>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	0112      	lsls	r2, r2, #4
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	440b      	add	r3, r1
 80001dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e0:	e00a      	b.n	80001f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <__NVIC_SetPriority+0x50>)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	3b04      	subs	r3, #4
 80001f0:	0112      	lsls	r2, r2, #4
 80001f2:	b2d2      	uxtb	r2, r2
 80001f4:	440b      	add	r3, r1
 80001f6:	761a      	strb	r2, [r3, #24]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <main>:
void SysTick_Handler(void);

void GPIO_Init();

int main()
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	GPIO_Init();
 8000212:	f000 f87d 	bl	8000310 <GPIO_Init>

	uint32_t led_timer = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]

	while (1)
	{
		if((sys_mcount - led_timer) >= 1000)
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <main+0x30>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000226:	d3f8      	bcc.n	800021a <main+0xe>
		{
			led_timer = sys_mcount;
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <main+0x30>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	607b      	str	r3, [r7, #4]
			GPIOC->ODR ^= (1 << 13);
 800022e:	4b04      	ldr	r3, [pc, #16]	; (8000240 <main+0x34>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a03      	ldr	r2, [pc, #12]	; (8000240 <main+0x34>)
 8000234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000238:	60d3      	str	r3, [r2, #12]
		if((sys_mcount - led_timer) >= 1000)
 800023a:	e7ee      	b.n	800021a <main+0xe>
 800023c:	2000001c 	.word	0x2000001c
 8000240:	40011000 	.word	0x40011000

08000244 <SystemInit>:
                     SysTick_CTRL_TICKINT_Msk   |
                     SysTick_CTRL_ENABLE_Msk;							/* Enable System Timer */
}

void SystemInit()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000248:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <SystemInit+0xa4>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a26      	ldr	r2, [pc, #152]	; (80002e8 <SystemInit+0xa4>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000254:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <SystemInit+0xa4>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a23      	ldr	r2, [pc, #140]	; (80002e8 <SystemInit+0xa4>)
 800025a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800025e:	61d3      	str	r3, [r2, #28]

	/* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000260:	2003      	movs	r0, #3
 8000262:	f7ff ff85 	bl	8000170 <__NVIC_SetPriorityGrouping>

	/* NOJTAG: JTAG-DP Disabled and SW-DP Enabled */
	AFIO->MAPR |= 	AFIO_MAPR_SWJ_CFG_1;
 8000266:	4b21      	ldr	r3, [pc, #132]	; (80002ec <SystemInit+0xa8>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	4a20      	ldr	r2, [pc, #128]	; (80002ec <SystemInit+0xa8>)
 800026c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000270:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_HSEON; /* HSE: 8MHz */
 8000272:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <SystemInit+0xa4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <SystemInit+0xa4>)
 8000278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800027c:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY_Msk) != RCC_CR_HSERDY);
 800027e:	bf00      	nop
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <SystemInit+0xa4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800028c:	d1f8      	bne.n	8000280 <SystemInit+0x3c>
	RCC->CFGR |= RCC_CFGR_HPRE_Msk & RCC_CFGR_HPRE_DIV1;	/* AHB_CLK: 8MHz */
 800028e:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <SystemInit+0xa4>)
 8000290:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <SystemInit+0xa4>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_Msk & RCC_CFGR_PPRE1_DIV1;	/* APB1_CLK: 8MHz */
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <SystemInit+0xa4>)
 8000298:	4a13      	ldr	r2, [pc, #76]	; (80002e8 <SystemInit+0xa4>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE2_Msk & RCC_CFGR_PPRE2_DIV1;	/* APB2_CLK: 8MHz */
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <SystemInit+0xa4>)
 80002a0:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <SystemInit+0xa4>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_Msk & RCC_CFGR_SW_HSE;			/* Cortex System_CLK: 8MHz */
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <SystemInit+0xa4>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <SystemInit+0xa4>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6053      	str	r3, [r2, #4]
	while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSE);
 80002b2:	bf00      	nop
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <SystemInit+0xa4>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	f003 030c 	and.w	r3, r3, #12
 80002bc:	2b04      	cmp	r3, #4
 80002be:	d1f9      	bne.n	80002b4 <SystemInit+0x70>
}
 80002c0:	bf00      	nop
    SysTick->LOAD  = (uint32_t)((HCLK_FREQ/1000U) - 1UL);             	/* set reload register */
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <SystemInit+0xac>)
 80002c4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002c8:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); 	/* set Priority for Systick Interrupt */
 80002ca:	210f      	movs	r1, #15
 80002cc:	f04f 30ff 	mov.w	r0, #4294967295
 80002d0:	f7ff ff72 	bl	80001b8 <__NVIC_SetPriority>
    SysTick->VAL   = 0UL;                                             	/* Load the SysTick Counter Value */
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <SystemInit+0xac>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002da:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <SystemInit+0xac>)
 80002dc:	2207      	movs	r2, #7
 80002de:	601a      	str	r2, [r3, #0]
}
 80002e0:	bf00      	nop

	SystemClock_Config();
	SystemTIM_Init();
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010000 	.word	0x40010000
 80002f0:	e000e010 	.word	0xe000e010

080002f4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	sys_mcount = sys_mcount + 1;
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <SysTick_Handler+0x18>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	3301      	adds	r3, #1
 80002fe:	4a03      	ldr	r2, [pc, #12]	; (800030c <SysTick_Handler+0x18>)
 8000300:	6013      	str	r3, [r2, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	2000001c 	.word	0x2000001c

08000310 <GPIO_Init>:
  __disable_irq();
  while (1);
}

void GPIO_Init()
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	/* GPIO Init */
	/* GPIO Ports A,C,D Clock Enable */
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <GPIO_Init+0x40>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <GPIO_Init+0x40>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <GPIO_Init+0x40>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <GPIO_Init+0x40>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <GPIO_Init+0x40>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <GPIO_Init+0x40>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]

	GPIOC->CRH = GPIO_CRH_MODE13_1;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <GPIO_Init+0x44>)
 800033a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800033e:	605a      	str	r2, [r3, #4]
    GPIOC->ODR = 0;
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <GPIO_Init+0x44>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f7ff ff72 	bl	8000244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	; (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ff3f 	bl	800020c <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	20000020 	.word	0x20000020

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	2600      	movs	r6, #0
 80003b0:	4d0c      	ldr	r5, [pc, #48]	; (80003e4 <__libc_init_array+0x38>)
 80003b2:	4c0d      	ldr	r4, [pc, #52]	; (80003e8 <__libc_init_array+0x3c>)
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	f000 f81a 	bl	80003f4 <_init>
 80003c0:	2600      	movs	r6, #0
 80003c2:	4d0a      	ldr	r5, [pc, #40]	; (80003ec <__libc_init_array+0x40>)
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <__libc_init_array+0x44>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
