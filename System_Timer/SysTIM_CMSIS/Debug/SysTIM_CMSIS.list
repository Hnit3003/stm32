
SysTIM_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000358  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000490  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00010490  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00010490  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000490  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000490  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000490  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000890  00000000  00000000  000104b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000217  00000000  00000000  00010d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fefb  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000068e  00000000  00000000  00020f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054486  00000000  00000000  000215c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00075a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000012c  00000000  00000000  00075a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000470 	.word	0x08000470

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000470 	.word	0x08000470

08000170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f003 0307 	and.w	r3, r3, #7
 800017e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000182:	68db      	ldr	r3, [r3, #12]
 8000184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000186:	68ba      	ldr	r2, [r7, #8]
 8000188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800018c:	4013      	ands	r3, r2
 800018e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800019c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <__NVIC_SetPriorityGrouping+0x44>)
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	60d3      	str	r3, [r2, #12]
}
 80001a8:	bf00      	nop
 80001aa:	3714      	adds	r7, #20
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	e000ed00 	.word	0xe000ed00

080001b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__NVIC_GetPriorityGrouping+0x18>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	0a1b      	lsrs	r3, r3, #8
 80001c2:	f003 0307 	and.w	r3, r3, #7
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000ed00 	.word	0xe000ed00

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000228:	b480      	push	{r7}
 800022a:	b089      	sub	sp, #36	; 0x24
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	f003 0307 	and.w	r3, r3, #7
 800023a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	f1c3 0307 	rsb	r3, r3, #7
 8000242:	2b04      	cmp	r3, #4
 8000244:	bf28      	it	cs
 8000246:	2304      	movcs	r3, #4
 8000248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	69fb      	ldr	r3, [r7, #28]
 800024c:	3304      	adds	r3, #4
 800024e:	2b06      	cmp	r3, #6
 8000250:	d902      	bls.n	8000258 <NVIC_EncodePriority+0x30>
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	3b03      	subs	r3, #3
 8000256:	e000      	b.n	800025a <NVIC_EncodePriority+0x32>
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	f04f 32ff 	mov.w	r2, #4294967295
 8000260:	69bb      	ldr	r3, [r7, #24]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	43da      	mvns	r2, r3
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	401a      	ands	r2, r3
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000270:	f04f 31ff 	mov.w	r1, #4294967295
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	43d9      	mvns	r1, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000280:	4313      	orrs	r3, r2
         );
}
 8000282:	4618      	mov	r0, r3
 8000284:	3724      	adds	r7, #36	; 0x24
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <SysTick_Handler>:

#define HCLK_FREQ	16000000U

volatile uint32_t sys_mcount = 0;
void SysTick_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	sys_mcount = sys_mcount + 1;
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <SysTick_Handler+0x18>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	4a03      	ldr	r2, [pc, #12]	; (80002a4 <SysTick_Handler+0x18>)
 8000298:	6013      	str	r3, [r2, #0]
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <main>:

int main()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80002ae:	4b44      	ldr	r3, [pc, #272]	; (80003c0 <main+0x118>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a43      	ldr	r2, [pc, #268]	; (80003c0 <main+0x118>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002ba:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <main+0x118>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	4a40      	ldr	r2, [pc, #256]	; (80003c0 <main+0x118>)
 80002c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c4:	61d3      	str	r3, [r2, #28]

	/* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c6:	2003      	movs	r0, #3
 80002c8:	f7ff ff52 	bl	8000170 <__NVIC_SetPriorityGrouping>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80002cc:	f7ff ff74 	bl	80001b8 <__NVIC_GetPriorityGrouping>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2200      	movs	r2, #0
 80002d4:	210f      	movs	r1, #15
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ffa6 	bl	8000228 <NVIC_EncodePriority>
 80002dc:	4603      	mov	r3, r0
 80002de:	4619      	mov	r1, r3
 80002e0:	f04f 30ff 	mov.w	r0, #4294967295
 80002e4:	f7ff ff76 	bl	80001d4 <__NVIC_SetPriority>

	/* NOJTAG: JTAG-DP Disabled and SW-DP Enabled */
	MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80002e8:	4b36      	ldr	r3, [pc, #216]	; (80003c4 <main+0x11c>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002f0:	4a34      	ldr	r2, [pc, #208]	; (80003c4 <main+0x11c>)
 80002f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002f6:	6053      	str	r3, [r2, #4]

	/* System Clock Configuration */
	/* Enable HSE 8MHz and wait till HSE is ready */
	RCC->CR |= RCC_CR_HSEON;
 80002f8:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <main+0x118>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a30      	ldr	r2, [pc, #192]	; (80003c0 <main+0x118>)
 80002fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000302:	6013      	str	r3, [r2, #0]
	while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000304:	bf00      	nop
 8000306:	4b2e      	ldr	r3, [pc, #184]	; (80003c0 <main+0x118>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800030e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000312:	d0f8      	beq.n	8000306 <main+0x5e>
	/* Set AHB Prescaler DIV1 */
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1);
 8000314:	4b2a      	ldr	r3, [pc, #168]	; (80003c0 <main+0x118>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4a29      	ldr	r2, [pc, #164]	; (80003c0 <main+0x118>)
 800031a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800031e:	6053      	str	r3, [r2, #4]
	/* Set APB1 Prescaler DIV1 */
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_CFGR_PPRE1_DIV1);
 8000320:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <main+0x118>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a26      	ldr	r2, [pc, #152]	; (80003c0 <main+0x118>)
 8000326:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800032a:	6053      	str	r3, [r2, #4]
	/* Set APB2 Prescaler DIV1 */
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_CFGR_PPRE2_DIV1);
 800032c:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <main+0x118>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a23      	ldr	r2, [pc, #140]	; (80003c0 <main+0x118>)
 8000332:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000336:	6053      	str	r3, [r2, #4]
	/* Set System Clock Source HSE and wait till System clock is ready*/
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_HSE);
 8000338:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <main+0x118>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	f023 0303 	bic.w	r3, r3, #3
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <main+0x118>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6053      	str	r3, [r2, #4]
//	SysTick->CTRL =	SysTick_CTRL_CLKSOURCE_Msk |
//					SysTick_CTRL_TICKINT_Msk   |
//					SysTick_CTRL_ENABLE_Msk;                  		/* Enable the Systick Timer */

//	SysTick_Config((8000000/1000));
    SysTick->LOAD  = (uint32_t)((HCLK_FREQ/1000U) - 1UL);             /* set reload register */
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <main+0x120>)
 800034a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800034e:	605a      	str	r2, [r3, #4]
    NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000350:	210f      	movs	r1, #15
 8000352:	f04f 30ff 	mov.w	r0, #4294967295
 8000356:	f7ff ff3d 	bl	80001d4 <__NVIC_SetPriority>
    SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <main+0x120>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000360:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <main+0x120>)
 8000362:	2207      	movs	r2, #7
 8000364:	601a      	str	r2, [r3, #0]
                     SysTick_CTRL_TICKINT_Msk   |
                     SysTick_CTRL_ENABLE_Msk;
	/* GPIO Init */
	/* GPIO Ports A,C,D Clock Enable */
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000366:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <main+0x118>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <main+0x118>)
 800036c:	f043 0310 	orr.w	r3, r3, #16
 8000370:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000372:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <main+0x118>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <main+0x118>)
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <main+0x118>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <main+0x118>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	6193      	str	r3, [r2, #24]

	GPIOC->CRH = GPIO_CRH_MODE13_1;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <main+0x124>)
 800038c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000390:	605a      	str	r2, [r3, #4]
    GPIOC->ODR = 0;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <main+0x124>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]

	uint32_t led_timer = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]

	while (1)
	{
		if((sys_mcount - led_timer) >= 1000)
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <main+0x128>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003a8:	d3f8      	bcc.n	800039c <main+0xf4>
		{
			led_timer = sys_mcount;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <main+0x128>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	607b      	str	r3, [r7, #4]

			GPIOC->ODR ^= (1 << 13);
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <main+0x124>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a05      	ldr	r2, [pc, #20]	; (80003cc <main+0x124>)
 80003b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80003ba:	60d3      	str	r3, [r2, #12]
		if((sys_mcount - led_timer) >= 1000)
 80003bc:	e7ee      	b.n	800039c <main+0xf4>
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010000 	.word	0x40010000
 80003c8:	e000e010 	.word	0xe000e010
 80003cc:	40011000 	.word	0x40011000
 80003d0:	2000001c 	.word	0x2000001c

080003d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d4:	480d      	ldr	r0, [pc, #52]	; (800040c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <LoopForever+0x6>)
  ldr r1, =_edata
 80003de:	490d      	ldr	r1, [pc, #52]	; (8000414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e0:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <LoopForever+0xe>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e4:	e002      	b.n	80003ec <LoopCopyDataInit>

080003e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ea:	3304      	adds	r3, #4

080003ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f0:	d3f9      	bcc.n	80003e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f4:	4c0a      	ldr	r4, [pc, #40]	; (8000420 <LoopForever+0x16>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f8:	e001      	b.n	80003fe <LoopFillZerobss>

080003fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003fc:	3204      	adds	r2, #4

080003fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000400:	d3fb      	bcc.n	80003fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000402:	f000 f811 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000406:	f7ff ff4f 	bl	80002a8 <main>

0800040a <LoopForever>:

LoopForever:
  b LoopForever
 800040a:	e7fe      	b.n	800040a <LoopForever>
  ldr   r0, =_estack
 800040c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000418:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 800041c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000420:	20000020 	.word	0x20000020

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_2_IRQHandler>
	...

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	2600      	movs	r6, #0
 800042c:	4d0c      	ldr	r5, [pc, #48]	; (8000460 <__libc_init_array+0x38>)
 800042e:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	f000 f81a 	bl	8000470 <_init>
 800043c:	2600      	movs	r6, #0
 800043e:	4d0a      	ldr	r5, [pc, #40]	; (8000468 <__libc_init_array+0x40>)
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <__libc_init_array+0x44>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f855 3b04 	ldr.w	r3, [r5], #4
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
